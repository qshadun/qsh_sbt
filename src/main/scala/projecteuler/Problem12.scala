package projecteuler

/**
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
object Problem12 {

  val trs = {
    def loop(s: Int, n: Int):Stream[Int] = {println(s+n); (s+n) #:: loop(s+n, n+1)}
    loop(0, 1)
  }  
  def findDivisibles(n: Int) = (1 to Math.sqrt(n).toInt).filter(n % _ == 0)
  //.map(x => List(x, n/x)).flatten.distinct
  def main(args: Array[String]): Unit = {
    val x = trs.dropWhile(findDivisibles(_).size < 250).head
    println(x)
    val divs = findDivisibles(x)
    println(divs.sortBy(x => x))
    println(divs.size)
  }

}