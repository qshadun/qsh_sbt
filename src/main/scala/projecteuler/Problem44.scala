package projecteuler
/**
 * Pentagon numbers
 * Problem 44
 * Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers are:
 *
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk - Pj| is minimised;
 * what is the value of D?
 */
object Problem44 {
  def main(args: Array[String]): Unit = {
//    val pentagons = Stream.tabulate(Int.MaxValue) { x => x * (3L * x - 1) / 2 }.tail
//    pentagons.find { x =>
//      val after = pentagons.dropWhile(_ < x)
//      val ps = after.zip(after.tail).takeWhile(t => t._2 - t._1 <= x).map(_._2).toList
//      val qualified = ps.filter(y => isPentagon(y + x) && isPentagon(y - x))
//      if (qualified.size > 0) println(x + "," + qualified + ", D is " + qualified.map(_ - x).min)
//      qualified.size > 0
//    }

    def pentag(n: Int) = n * (3 * n - 1) / 2
    def isPentagon(n: Long) = {
      val x = 1 + 24 * n
      val t = Math.sqrt(x).toLong
      t * t == x && t % 6 == 5
    }

    def explore(sum: Int) = {
      val h = sum / 2 + 1
      val p = for { i <- (h until sum).view } yield (i, sum - i)
      p.find(x => {
        val pi = pentag(x._1)
        val pj = pentag(x._2)
        isPentagon(pi - pj) && isPentagon(pi + pj)
      })
    }

    def exploreAll(n: Int): (Int, Int) = {
      val ret = explore(n)
      if (ret.isDefined)
        ret.get
      else exploreAll(n + 1)
    }

    val ret = exploreAll(2)
    println(pentag(ret._2) - pentag(ret._1))
  }
}
